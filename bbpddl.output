

Terminals which are not used:

   EQ
   FLUENT


State 39 contains 1 shift/reduce conflict.

Grammar
rule 1    pddl -> domain
rule 2    pddl -> problem
rule 3    pddl -> control
rule 4    domain -> '(' DEFINE '(' DOMAIN id ')' domain_body ')'
rule 5    domain_body -> domain_structure
rule 6    domain_body -> domain_body domain_structure
rule 7    domain_structure -> require_def
rule 8    domain_structure -> '(' ':' CONSTANTS typedlist ')'
rule 9    domain_structure -> '(' ':' TYPES typedlist ')'
rule 10   domain_structure -> '(' ':' PREDICATES predlist ')'
rule 11   domain_structure -> action
rule 12   require_def -> '(' ':' REQUIREMENTS requires ')'
rule 13   problem -> '(' DEFINE '(' PROBLEM id ')' '(' ':' DOMAIN id ')' problem_body ')'
rule 14   problem_body -> problem_structure
rule 15   problem_body -> problem_body problem_structure
rule 16   problem_structure -> require_def
rule 17   problem_structure -> '(' ':' OBJECTS typedlist ')'
rule 18   problem_structure -> '(' ':' INIT factlist ')'
rule 19   problem_structure -> '(' ':' GOAL factlist ')'
rule 20   problem_structure -> '(' ':' LENGTH length_spec ')'
rule 21   length_spec -> length
rule 22   length_spec -> length length_spec
rule 23   length -> '(' ':' SERIAL id ')'
rule 24   length -> '(' ':' PARALLEL id ')'
rule 25   control -> '(' DEFINE '(' CONTROL id ')' '(' ':' DOMAIN id ')' control_body ')'
rule 26   control_body -> ctrl
rule 27   control_body -> wffctrl
rule 28   control_body -> defpred
rule 29   control_body -> ctrl control_body
rule 30   control_body -> wffctrl control_body
rule 31   control_body -> defpred control_body
rule 32   defpred -> '(' ':' DEFPREDICATE id parameter factlist ')'
rule 33   actionhead -> '(' ':' ACTION id
rule 34   action -> actionhead parameter precondition effect ')'
rule 35   action -> actionhead precondition effect ')'
rule 36   action -> actionhead effect ')'
rule 37   ctrl -> '(' ':' ACTION id ':' EXCLUDE factlist ')'
rule 38   wffctrl -> '(' ':' WFFCTRL id scope precondition effect ')'
rule 39   scope -> ':' SCOPE factlist
rule 40   parameter -> ':' PARAMETERS parameters
rule 41   parameter -> ':' PARAMETERS 'b' 'a' 'd'
rule 42   parameter -> ':' PARAMETERS
rule 43   precondition -> ':' PRECONDITION factlist
rule 44   precondition -> ':' PRECONDITION
rule 45   effect -> ':' EFFECT factlist
rule 46   parameters -> '(' ')'
rule 47   parameters -> '(' typedparamlist ')'
rule 48   typedlist -> idlist
rule 49   typedlist -> idlist type_def
rule 50   typedlist -> idlist type_def typedlist
rule 51   typedparamlist -> paramlist
rule 52   typedparamlist -> paramlist type_def
rule 53   typedparamlist -> paramlist type_def typedparamlist
rule 54   type_def -> '-' type
rule 55   type -> id
rule 56   type -> '(' EITHER types ')'
rule 57   types -> id
rule 58   types -> id types
rule 59   idlist -> id
rule 60   idlist -> id idlist
rule 61   paramlist -> variable
rule 62   paramlist -> variable paramlist
rule 63   predlist -> predicate
rule 64   predlist -> predicate predlist
rule 65   predicate -> '(' id ')'
rule 66   predicate -> '(' id typedparamlist ')'
rule 67   factlist -> termlist
rule 68   factlist -> '(' AND termlist ')'
rule 69   factlist -> '(' AND ')'
rule 70   factlist -> exists
rule 71   factlist -> forall
rule 72   exists -> '(' EXISTS parameters term factlist ')'
rule 73   forall -> '(' FORALL parameters term factlist ')'
rule 74   termlist -> term
rule 75   termlist -> term termlist
rule 76   term -> '(' tokenlist ')'
rule 77   term -> '(' NOT term ')'
rule 78   term -> '(' NEXT term ')'
rule 79   term -> '(' GOAL term ')'
rule 80   term -> '(' ')'
rule 81   requires -> ':' id
rule 82   requires -> ':' id requires
rule 83   tokenlist -> variable
rule 84   tokenlist -> id
rule 85   tokenlist -> variable tokenlist
rule 86   tokenlist -> id tokenlist
rule 87   variable -> VAR
rule 88   id -> ID

Terminals, with rules where they appear

$ (-1)
'(' (40) 4 8 9 10 12 13 17 18 19 20 23 24 25 32 33 37 38 46 47 56 65
    66 68 69 72 73 76 77 78 79 80
')' (41) 4 8 9 10 12 13 17 18 19 20 23 24 25 32 34 35 36 37 38 46 47
    56 65 66 68 69 72 73 76 77 78 79 80
'-' (45) 54
':' (58) 8 9 10 12 13 17 18 19 20 23 24 25 32 33 37 38 39 40 41 42
    43 44 45 81 82
'a' (97) 41
'b' (98) 41
'd' (100) 41
error (256)
DEFINE (258) 4 13 25
DOMAIN (259) 4 13 25
REQUIREMENTS (260) 12
CONSTANTS (261) 8
TYPES (262) 9
PREDICATES (263) 10
PROBLEM (264) 13
OBJECTS (265) 17
INIT (266) 18
LENGTH (267) 20
PARALLEL (268) 24
SERIAL (269) 23
CONTROL (270) 25
DEFPREDICATE (271) 32
EXCLUDE (272) 37
WFFCTRL (273) 38
SCOPE (274) 39
ACTION (275) 33 37
PARAMETERS (276) 40 41 42
PRECONDITION (277) 43 44
EFFECT (278) 45
AND (279) 68 69
FORALL (280) 73
EXISTS (281) 72
NEXT (282) 78
EQ (283)
NOT (284) 77
GOAL (285) 19 79
EITHER (286) 56
FLUENT (287)
ID (288) 88
VAR (289) 87

Nonterminals, with rules where they appear

pddl (42)
    on left: 1 2 3
domain (43)
    on left: 4, on right: 1
domain_body (44)
    on left: 5 6, on right: 4 6
domain_structure (45)
    on left: 7 8 9 10 11, on right: 5 6
require_def (46)
    on left: 12, on right: 7 16
problem (47)
    on left: 13, on right: 2
problem_body (48)
    on left: 14 15, on right: 13 15
problem_structure (49)
    on left: 16 17 18 19 20, on right: 14 15
length_spec (50)
    on left: 21 22, on right: 20 22
length (51)
    on left: 23 24, on right: 21 22
control (52)
    on left: 25, on right: 3
control_body (53)
    on left: 26 27 28 29 30 31, on right: 25 29 30 31
defpred (54)
    on left: 32, on right: 28 31
actionhead (55)
    on left: 33, on right: 34 35 36
action (56)
    on left: 34 35 36, on right: 11
ctrl (57)
    on left: 37, on right: 26 29
wffctrl (58)
    on left: 38, on right: 27 30
scope (59)
    on left: 39, on right: 38
parameter (60)
    on left: 40 41 42, on right: 32 34
precondition (61)
    on left: 43 44, on right: 34 35 38
effect (62)
    on left: 45, on right: 34 35 36 38
parameters (63)
    on left: 46 47, on right: 40 72 73
typedlist (64)
    on left: 48 49 50, on right: 8 9 17 50
typedparamlist (65)
    on left: 51 52 53, on right: 47 53 66
type_def (66)
    on left: 54, on right: 49 50 52 53
type (67)
    on left: 55 56, on right: 54
types (68)
    on left: 57 58, on right: 56 58
idlist (69)
    on left: 59 60, on right: 48 49 50 60
paramlist (70)
    on left: 61 62, on right: 51 52 53 62
predlist (71)
    on left: 63 64, on right: 10 64
predicate (72)
    on left: 65 66, on right: 63 64
factlist (73)
    on left: 67 68 69 70 71, on right: 18 19 32 37 39 43 45 72 73
exists (74)
    on left: 72, on right: 70
forall (75)
    on left: 73, on right: 71
termlist (76)
    on left: 74 75, on right: 67 68 75
term (77)
    on left: 76 77 78 79 80, on right: 72 73 74 75 77 78 79
requires (78)
    on left: 81 82, on right: 12 82
tokenlist (79)
    on left: 83 84 85 86, on right: 76 85 86
variable (80)
    on left: 87, on right: 61 62 83 85
id (81)
    on left: 88, on right: 4 13 23 24 25 32 33 37 38 55 57 58 59 60
    65 66 81 82 84 86


state 0

    '(' 	shift, and go to state 1

    pddl	go to state 202
    domain	go to state 2
    problem	go to state 3
    control	go to state 4



state 1

    domain  ->  '(' . DEFINE '(' DOMAIN id ')' domain_body ')'   (rule 4)
    problem  ->  '(' . DEFINE '(' PROBLEM id ')' '(' ':' DOMAIN id ')' problem_body ')'   (rule 13)
    control  ->  '(' . DEFINE '(' CONTROL id ')' '(' ':' DOMAIN id ')' control_body ')'   (rule 25)

    DEFINE	shift, and go to state 5



state 2

    pddl  ->  domain .   (rule 1)

    $default	reduce using rule 1 (pddl)



state 3

    pddl  ->  problem .   (rule 2)

    $default	reduce using rule 2 (pddl)



state 4

    pddl  ->  control .   (rule 3)

    $default	reduce using rule 3 (pddl)



state 5

    domain  ->  '(' DEFINE . '(' DOMAIN id ')' domain_body ')'   (rule 4)
    problem  ->  '(' DEFINE . '(' PROBLEM id ')' '(' ':' DOMAIN id ')' problem_body ')'   (rule 13)
    control  ->  '(' DEFINE . '(' CONTROL id ')' '(' ':' DOMAIN id ')' control_body ')'   (rule 25)

    '(' 	shift, and go to state 6



state 6

    domain  ->  '(' DEFINE '(' . DOMAIN id ')' domain_body ')'   (rule 4)
    problem  ->  '(' DEFINE '(' . PROBLEM id ')' '(' ':' DOMAIN id ')' problem_body ')'   (rule 13)
    control  ->  '(' DEFINE '(' . CONTROL id ')' '(' ':' DOMAIN id ')' control_body ')'   (rule 25)

    DOMAIN	shift, and go to state 7
    PROBLEM	shift, and go to state 8
    CONTROL	shift, and go to state 9



state 7

    domain  ->  '(' DEFINE '(' DOMAIN . id ')' domain_body ')'   (rule 4)

    ID  	shift, and go to state 10

    id  	go to state 11



state 8

    problem  ->  '(' DEFINE '(' PROBLEM . id ')' '(' ':' DOMAIN id ')' problem_body ')'   (rule 13)

    ID  	shift, and go to state 10

    id  	go to state 12



state 9

    control  ->  '(' DEFINE '(' CONTROL . id ')' '(' ':' DOMAIN id ')' control_body ')'   (rule 25)

    ID  	shift, and go to state 10

    id  	go to state 13



state 10

    id  ->  ID .   (rule 88)

    $default	reduce using rule 88 (id)



state 11

    domain  ->  '(' DEFINE '(' DOMAIN id . ')' domain_body ')'   (rule 4)

    ')' 	shift, and go to state 14



state 12

    problem  ->  '(' DEFINE '(' PROBLEM id . ')' '(' ':' DOMAIN id ')' problem_body ')'   (rule 13)

    ')' 	shift, and go to state 15



state 13

    control  ->  '(' DEFINE '(' CONTROL id . ')' '(' ':' DOMAIN id ')' control_body ')'   (rule 25)

    ')' 	shift, and go to state 16



state 14

    domain  ->  '(' DEFINE '(' DOMAIN id ')' . domain_body ')'   (rule 4)

    '(' 	shift, and go to state 17

    domain_body	go to state 18
    domain_structure	go to state 19
    require_def	go to state 20
    actionhead	go to state 21
    action	go to state 22



state 15

    problem  ->  '(' DEFINE '(' PROBLEM id ')' . '(' ':' DOMAIN id ')' problem_body ')'   (rule 13)

    '(' 	shift, and go to state 23



state 16

    control  ->  '(' DEFINE '(' CONTROL id ')' . '(' ':' DOMAIN id ')' control_body ')'   (rule 25)

    '(' 	shift, and go to state 24



state 17

    domain_structure  ->  '(' . ':' CONSTANTS typedlist ')'   (rule 8)
    domain_structure  ->  '(' . ':' TYPES typedlist ')'   (rule 9)
    domain_structure  ->  '(' . ':' PREDICATES predlist ')'   (rule 10)
    require_def  ->  '(' . ':' REQUIREMENTS requires ')'   (rule 12)
    actionhead  ->  '(' . ':' ACTION id   (rule 33)

    ':' 	shift, and go to state 25



state 18

    domain  ->  '(' DEFINE '(' DOMAIN id ')' domain_body . ')'   (rule 4)
    domain_body  ->  domain_body . domain_structure   (rule 6)

    '(' 	shift, and go to state 17
    ')' 	shift, and go to state 26

    domain_structure	go to state 27
    require_def	go to state 20
    actionhead	go to state 21
    action	go to state 22



state 19

    domain_body  ->  domain_structure .   (rule 5)

    $default	reduce using rule 5 (domain_body)



state 20

    domain_structure  ->  require_def .   (rule 7)

    $default	reduce using rule 7 (domain_structure)



state 21

    action  ->  actionhead . parameter precondition effect ')'   (rule 34)
    action  ->  actionhead . precondition effect ')'   (rule 35)
    action  ->  actionhead . effect ')'   (rule 36)

    ':' 	shift, and go to state 28

    parameter	go to state 29
    precondition	go to state 30
    effect	go to state 31



state 22

    domain_structure  ->  action .   (rule 11)

    $default	reduce using rule 11 (domain_structure)



state 23

    problem  ->  '(' DEFINE '(' PROBLEM id ')' '(' . ':' DOMAIN id ')' problem_body ')'   (rule 13)

    ':' 	shift, and go to state 32



state 24

    control  ->  '(' DEFINE '(' CONTROL id ')' '(' . ':' DOMAIN id ')' control_body ')'   (rule 25)

    ':' 	shift, and go to state 33



state 25

    domain_structure  ->  '(' ':' . CONSTANTS typedlist ')'   (rule 8)
    domain_structure  ->  '(' ':' . TYPES typedlist ')'   (rule 9)
    domain_structure  ->  '(' ':' . PREDICATES predlist ')'   (rule 10)
    require_def  ->  '(' ':' . REQUIREMENTS requires ')'   (rule 12)
    actionhead  ->  '(' ':' . ACTION id   (rule 33)

    REQUIREMENTS	shift, and go to state 34
    CONSTANTS	shift, and go to state 35
    TYPES	shift, and go to state 36
    PREDICATES	shift, and go to state 37
    ACTION	shift, and go to state 38



state 26

    domain  ->  '(' DEFINE '(' DOMAIN id ')' domain_body ')' .   (rule 4)

    $default	reduce using rule 4 (domain)



state 27

    domain_body  ->  domain_body domain_structure .   (rule 6)

    $default	reduce using rule 6 (domain_body)



state 28

    parameter  ->  ':' . PARAMETERS parameters   (rule 40)
    parameter  ->  ':' . PARAMETERS 'b' 'a' 'd'   (rule 41)
    parameter  ->  ':' . PARAMETERS   (rule 42)
    precondition  ->  ':' . PRECONDITION factlist   (rule 43)
    precondition  ->  ':' . PRECONDITION   (rule 44)
    effect  ->  ':' . EFFECT factlist   (rule 45)

    PARAMETERS	shift, and go to state 39
    PRECONDITION	shift, and go to state 40
    EFFECT	shift, and go to state 41



state 29

    action  ->  actionhead parameter . precondition effect ')'   (rule 34)

    ':' 	shift, and go to state 42

    precondition	go to state 43



state 30

    action  ->  actionhead precondition . effect ')'   (rule 35)

    ':' 	shift, and go to state 44

    effect	go to state 45



state 31

    action  ->  actionhead effect . ')'   (rule 36)

    ')' 	shift, and go to state 46



state 32

    problem  ->  '(' DEFINE '(' PROBLEM id ')' '(' ':' . DOMAIN id ')' problem_body ')'   (rule 13)

    DOMAIN	shift, and go to state 47



state 33

    control  ->  '(' DEFINE '(' CONTROL id ')' '(' ':' . DOMAIN id ')' control_body ')'   (rule 25)

    DOMAIN	shift, and go to state 48



state 34

    require_def  ->  '(' ':' REQUIREMENTS . requires ')'   (rule 12)

    ':' 	shift, and go to state 49

    requires	go to state 50



state 35

    domain_structure  ->  '(' ':' CONSTANTS . typedlist ')'   (rule 8)

    ID  	shift, and go to state 10

    typedlist	go to state 51
    idlist	go to state 52
    id  	go to state 53



state 36

    domain_structure  ->  '(' ':' TYPES . typedlist ')'   (rule 9)

    ID  	shift, and go to state 10

    typedlist	go to state 54
    idlist	go to state 52
    id  	go to state 53



state 37

    domain_structure  ->  '(' ':' PREDICATES . predlist ')'   (rule 10)

    '(' 	shift, and go to state 55

    predlist	go to state 56
    predicate	go to state 57



state 38

    actionhead  ->  '(' ':' ACTION . id   (rule 33)

    ID  	shift, and go to state 10

    id  	go to state 58



state 39

    parameter  ->  ':' PARAMETERS . parameters   (rule 40)
    parameter  ->  ':' PARAMETERS . 'b' 'a' 'd'   (rule 41)
    parameter  ->  ':' PARAMETERS .   (rule 42)

    '(' 	shift, and go to state 59
    'b' 	shift, and go to state 60

    '(' 	[reduce using rule 42 (parameter)]
    $default	reduce using rule 42 (parameter)

    parameters	go to state 61



state 40

    precondition  ->  ':' PRECONDITION . factlist   (rule 43)
    precondition  ->  ':' PRECONDITION .   (rule 44)

    '(' 	shift, and go to state 62

    $default	reduce using rule 44 (precondition)

    factlist	go to state 63
    exists	go to state 64
    forall	go to state 65
    termlist	go to state 66
    term	go to state 67



state 41

    effect  ->  ':' EFFECT . factlist   (rule 45)

    '(' 	shift, and go to state 62

    factlist	go to state 68
    exists	go to state 64
    forall	go to state 65
    termlist	go to state 66
    term	go to state 67



state 42

    precondition  ->  ':' . PRECONDITION factlist   (rule 43)
    precondition  ->  ':' . PRECONDITION   (rule 44)

    PRECONDITION	shift, and go to state 40



state 43

    action  ->  actionhead parameter precondition . effect ')'   (rule 34)

    ':' 	shift, and go to state 44

    effect	go to state 69



state 44

    effect  ->  ':' . EFFECT factlist   (rule 45)

    EFFECT	shift, and go to state 41



state 45

    action  ->  actionhead precondition effect . ')'   (rule 35)

    ')' 	shift, and go to state 70



state 46

    action  ->  actionhead effect ')' .   (rule 36)

    $default	reduce using rule 36 (action)



state 47

    problem  ->  '(' DEFINE '(' PROBLEM id ')' '(' ':' DOMAIN . id ')' problem_body ')'   (rule 13)

    ID  	shift, and go to state 10

    id  	go to state 71



state 48

    control  ->  '(' DEFINE '(' CONTROL id ')' '(' ':' DOMAIN . id ')' control_body ')'   (rule 25)

    ID  	shift, and go to state 10

    id  	go to state 72



state 49

    requires  ->  ':' . id   (rule 81)
    requires  ->  ':' . id requires   (rule 82)

    ID  	shift, and go to state 10

    id  	go to state 73



state 50

    require_def  ->  '(' ':' REQUIREMENTS requires . ')'   (rule 12)

    ')' 	shift, and go to state 74



state 51

    domain_structure  ->  '(' ':' CONSTANTS typedlist . ')'   (rule 8)

    ')' 	shift, and go to state 75



state 52

    typedlist  ->  idlist .   (rule 48)
    typedlist  ->  idlist . type_def   (rule 49)
    typedlist  ->  idlist . type_def typedlist   (rule 50)

    '-' 	shift, and go to state 76

    $default	reduce using rule 48 (typedlist)

    type_def	go to state 77



state 53

    idlist  ->  id .   (rule 59)
    idlist  ->  id . idlist   (rule 60)

    ID  	shift, and go to state 10

    $default	reduce using rule 59 (idlist)

    idlist	go to state 78
    id  	go to state 53



state 54

    domain_structure  ->  '(' ':' TYPES typedlist . ')'   (rule 9)

    ')' 	shift, and go to state 79



state 55

    predicate  ->  '(' . id ')'   (rule 65)
    predicate  ->  '(' . id typedparamlist ')'   (rule 66)

    ID  	shift, and go to state 10

    id  	go to state 80



state 56

    domain_structure  ->  '(' ':' PREDICATES predlist . ')'   (rule 10)

    ')' 	shift, and go to state 81



state 57

    predlist  ->  predicate .   (rule 63)
    predlist  ->  predicate . predlist   (rule 64)

    '(' 	shift, and go to state 55

    $default	reduce using rule 63 (predlist)

    predlist	go to state 82
    predicate	go to state 57



state 58

    actionhead  ->  '(' ':' ACTION id .   (rule 33)

    $default	reduce using rule 33 (actionhead)



state 59

    parameters  ->  '(' . ')'   (rule 46)
    parameters  ->  '(' . typedparamlist ')'   (rule 47)

    VAR 	shift, and go to state 83
    ')' 	shift, and go to state 84

    typedparamlist	go to state 85
    paramlist	go to state 86
    variable	go to state 87



state 60

    parameter  ->  ':' PARAMETERS 'b' . 'a' 'd'   (rule 41)

    'a' 	shift, and go to state 88



state 61

    parameter  ->  ':' PARAMETERS parameters .   (rule 40)

    $default	reduce using rule 40 (parameter)



state 62

    factlist  ->  '(' . AND termlist ')'   (rule 68)
    factlist  ->  '(' . AND ')'   (rule 69)
    exists  ->  '(' . EXISTS parameters term factlist ')'   (rule 72)
    forall  ->  '(' . FORALL parameters term factlist ')'   (rule 73)
    term  ->  '(' . tokenlist ')'   (rule 76)
    term  ->  '(' . NOT term ')'   (rule 77)
    term  ->  '(' . NEXT term ')'   (rule 78)
    term  ->  '(' . GOAL term ')'   (rule 79)
    term  ->  '(' . ')'   (rule 80)

    AND 	shift, and go to state 89
    FORALL	shift, and go to state 90
    EXISTS	shift, and go to state 91
    NEXT	shift, and go to state 92
    NOT 	shift, and go to state 93
    GOAL	shift, and go to state 94
    ID  	shift, and go to state 10
    VAR 	shift, and go to state 83
    ')' 	shift, and go to state 95

    tokenlist	go to state 96
    variable	go to state 97
    id  	go to state 98



state 63

    precondition  ->  ':' PRECONDITION factlist .   (rule 43)

    $default	reduce using rule 43 (precondition)



state 64

    factlist  ->  exists .   (rule 70)

    $default	reduce using rule 70 (factlist)



state 65

    factlist  ->  forall .   (rule 71)

    $default	reduce using rule 71 (factlist)



state 66

    factlist  ->  termlist .   (rule 67)

    $default	reduce using rule 67 (factlist)



state 67

    termlist  ->  term .   (rule 74)
    termlist  ->  term . termlist   (rule 75)

    '(' 	shift, and go to state 99

    $default	reduce using rule 74 (termlist)

    termlist	go to state 100
    term	go to state 67



state 68

    effect  ->  ':' EFFECT factlist .   (rule 45)

    $default	reduce using rule 45 (effect)



state 69

    action  ->  actionhead parameter precondition effect . ')'   (rule 34)

    ')' 	shift, and go to state 101



state 70

    action  ->  actionhead precondition effect ')' .   (rule 35)

    $default	reduce using rule 35 (action)



state 71

    problem  ->  '(' DEFINE '(' PROBLEM id ')' '(' ':' DOMAIN id . ')' problem_body ')'   (rule 13)

    ')' 	shift, and go to state 102



state 72

    control  ->  '(' DEFINE '(' CONTROL id ')' '(' ':' DOMAIN id . ')' control_body ')'   (rule 25)

    ')' 	shift, and go to state 103



state 73

    requires  ->  ':' id .   (rule 81)
    requires  ->  ':' id . requires   (rule 82)

    ':' 	shift, and go to state 49

    $default	reduce using rule 81 (requires)

    requires	go to state 104



state 74

    require_def  ->  '(' ':' REQUIREMENTS requires ')' .   (rule 12)

    $default	reduce using rule 12 (require_def)



state 75

    domain_structure  ->  '(' ':' CONSTANTS typedlist ')' .   (rule 8)

    $default	reduce using rule 8 (domain_structure)



state 76

    type_def  ->  '-' . type   (rule 54)

    ID  	shift, and go to state 10
    '(' 	shift, and go to state 105

    type	go to state 106
    id  	go to state 107



state 77

    typedlist  ->  idlist type_def .   (rule 49)
    typedlist  ->  idlist type_def . typedlist   (rule 50)

    ID  	shift, and go to state 10

    $default	reduce using rule 49 (typedlist)

    typedlist	go to state 108
    idlist	go to state 52
    id  	go to state 53



state 78

    idlist  ->  id idlist .   (rule 60)

    $default	reduce using rule 60 (idlist)



state 79

    domain_structure  ->  '(' ':' TYPES typedlist ')' .   (rule 9)

    $default	reduce using rule 9 (domain_structure)



state 80

    predicate  ->  '(' id . ')'   (rule 65)
    predicate  ->  '(' id . typedparamlist ')'   (rule 66)

    VAR 	shift, and go to state 83
    ')' 	shift, and go to state 109

    typedparamlist	go to state 110
    paramlist	go to state 86
    variable	go to state 87



state 81

    domain_structure  ->  '(' ':' PREDICATES predlist ')' .   (rule 10)

    $default	reduce using rule 10 (domain_structure)



state 82

    predlist  ->  predicate predlist .   (rule 64)

    $default	reduce using rule 64 (predlist)



state 83

    variable  ->  VAR .   (rule 87)

    $default	reduce using rule 87 (variable)



state 84

    parameters  ->  '(' ')' .   (rule 46)

    $default	reduce using rule 46 (parameters)



state 85

    parameters  ->  '(' typedparamlist . ')'   (rule 47)

    ')' 	shift, and go to state 111



state 86

    typedparamlist  ->  paramlist .   (rule 51)
    typedparamlist  ->  paramlist . type_def   (rule 52)
    typedparamlist  ->  paramlist . type_def typedparamlist   (rule 53)

    '-' 	shift, and go to state 76

    $default	reduce using rule 51 (typedparamlist)

    type_def	go to state 112



state 87

    paramlist  ->  variable .   (rule 61)
    paramlist  ->  variable . paramlist   (rule 62)

    VAR 	shift, and go to state 83

    $default	reduce using rule 61 (paramlist)

    paramlist	go to state 113
    variable	go to state 87



state 88

    parameter  ->  ':' PARAMETERS 'b' 'a' . 'd'   (rule 41)

    'd' 	shift, and go to state 114



state 89

    factlist  ->  '(' AND . termlist ')'   (rule 68)
    factlist  ->  '(' AND . ')'   (rule 69)

    '(' 	shift, and go to state 99
    ')' 	shift, and go to state 115

    termlist	go to state 116
    term	go to state 67



state 90

    forall  ->  '(' FORALL . parameters term factlist ')'   (rule 73)

    '(' 	shift, and go to state 59

    parameters	go to state 117



state 91

    exists  ->  '(' EXISTS . parameters term factlist ')'   (rule 72)

    '(' 	shift, and go to state 59

    parameters	go to state 118



state 92

    term  ->  '(' NEXT . term ')'   (rule 78)

    '(' 	shift, and go to state 99

    term	go to state 119



state 93

    term  ->  '(' NOT . term ')'   (rule 77)

    '(' 	shift, and go to state 99

    term	go to state 120



state 94

    term  ->  '(' GOAL . term ')'   (rule 79)

    '(' 	shift, and go to state 99

    term	go to state 121



state 95

    term  ->  '(' ')' .   (rule 80)

    $default	reduce using rule 80 (term)



state 96

    term  ->  '(' tokenlist . ')'   (rule 76)

    ')' 	shift, and go to state 122



state 97

    tokenlist  ->  variable .   (rule 83)
    tokenlist  ->  variable . tokenlist   (rule 85)

    ID  	shift, and go to state 10
    VAR 	shift, and go to state 83

    $default	reduce using rule 83 (tokenlist)

    tokenlist	go to state 123
    variable	go to state 97
    id  	go to state 98



state 98

    tokenlist  ->  id .   (rule 84)
    tokenlist  ->  id . tokenlist   (rule 86)

    ID  	shift, and go to state 10
    VAR 	shift, and go to state 83

    $default	reduce using rule 84 (tokenlist)

    tokenlist	go to state 124
    variable	go to state 97
    id  	go to state 98



state 99

    term  ->  '(' . tokenlist ')'   (rule 76)
    term  ->  '(' . NOT term ')'   (rule 77)
    term  ->  '(' . NEXT term ')'   (rule 78)
    term  ->  '(' . GOAL term ')'   (rule 79)
    term  ->  '(' . ')'   (rule 80)

    NEXT	shift, and go to state 92
    NOT 	shift, and go to state 93
    GOAL	shift, and go to state 94
    ID  	shift, and go to state 10
    VAR 	shift, and go to state 83
    ')' 	shift, and go to state 95

    tokenlist	go to state 96
    variable	go to state 97
    id  	go to state 98



state 100

    termlist  ->  term termlist .   (rule 75)

    $default	reduce using rule 75 (termlist)



state 101

    action  ->  actionhead parameter precondition effect ')' .   (rule 34)

    $default	reduce using rule 34 (action)



state 102

    problem  ->  '(' DEFINE '(' PROBLEM id ')' '(' ':' DOMAIN id ')' . problem_body ')'   (rule 13)

    '(' 	shift, and go to state 125

    require_def	go to state 126
    problem_body	go to state 127
    problem_structure	go to state 128



state 103

    control  ->  '(' DEFINE '(' CONTROL id ')' '(' ':' DOMAIN id ')' . control_body ')'   (rule 25)

    '(' 	shift, and go to state 129

    control_body	go to state 130
    defpred	go to state 131
    ctrl	go to state 132
    wffctrl	go to state 133



state 104

    requires  ->  ':' id requires .   (rule 82)

    $default	reduce using rule 82 (requires)



state 105

    type  ->  '(' . EITHER types ')'   (rule 56)

    EITHER	shift, and go to state 134



state 106

    type_def  ->  '-' type .   (rule 54)

    $default	reduce using rule 54 (type_def)



state 107

    type  ->  id .   (rule 55)

    $default	reduce using rule 55 (type)



state 108

    typedlist  ->  idlist type_def typedlist .   (rule 50)

    $default	reduce using rule 50 (typedlist)



state 109

    predicate  ->  '(' id ')' .   (rule 65)

    $default	reduce using rule 65 (predicate)



state 110

    predicate  ->  '(' id typedparamlist . ')'   (rule 66)

    ')' 	shift, and go to state 135



state 111

    parameters  ->  '(' typedparamlist ')' .   (rule 47)

    $default	reduce using rule 47 (parameters)



state 112

    typedparamlist  ->  paramlist type_def .   (rule 52)
    typedparamlist  ->  paramlist type_def . typedparamlist   (rule 53)

    VAR 	shift, and go to state 83

    $default	reduce using rule 52 (typedparamlist)

    typedparamlist	go to state 136
    paramlist	go to state 86
    variable	go to state 87



state 113

    paramlist  ->  variable paramlist .   (rule 62)

    $default	reduce using rule 62 (paramlist)



state 114

    parameter  ->  ':' PARAMETERS 'b' 'a' 'd' .   (rule 41)

    $default	reduce using rule 41 (parameter)



state 115

    factlist  ->  '(' AND ')' .   (rule 69)

    $default	reduce using rule 69 (factlist)



state 116

    factlist  ->  '(' AND termlist . ')'   (rule 68)

    ')' 	shift, and go to state 137



state 117

    forall  ->  '(' FORALL parameters . term factlist ')'   (rule 73)

    '(' 	shift, and go to state 99

    term	go to state 138



state 118

    exists  ->  '(' EXISTS parameters . term factlist ')'   (rule 72)

    '(' 	shift, and go to state 99

    term	go to state 139



state 119

    term  ->  '(' NEXT term . ')'   (rule 78)

    ')' 	shift, and go to state 140



state 120

    term  ->  '(' NOT term . ')'   (rule 77)

    ')' 	shift, and go to state 141



state 121

    term  ->  '(' GOAL term . ')'   (rule 79)

    ')' 	shift, and go to state 142



state 122

    term  ->  '(' tokenlist ')' .   (rule 76)

    $default	reduce using rule 76 (term)



state 123

    tokenlist  ->  variable tokenlist .   (rule 85)

    $default	reduce using rule 85 (tokenlist)



state 124

    tokenlist  ->  id tokenlist .   (rule 86)

    $default	reduce using rule 86 (tokenlist)



state 125

    require_def  ->  '(' . ':' REQUIREMENTS requires ')'   (rule 12)
    problem_structure  ->  '(' . ':' OBJECTS typedlist ')'   (rule 17)
    problem_structure  ->  '(' . ':' INIT factlist ')'   (rule 18)
    problem_structure  ->  '(' . ':' GOAL factlist ')'   (rule 19)
    problem_structure  ->  '(' . ':' LENGTH length_spec ')'   (rule 20)

    ':' 	shift, and go to state 143



state 126

    problem_structure  ->  require_def .   (rule 16)

    $default	reduce using rule 16 (problem_structure)



state 127

    problem  ->  '(' DEFINE '(' PROBLEM id ')' '(' ':' DOMAIN id ')' problem_body . ')'   (rule 13)
    problem_body  ->  problem_body . problem_structure   (rule 15)

    '(' 	shift, and go to state 125
    ')' 	shift, and go to state 144

    require_def	go to state 126
    problem_structure	go to state 145



state 128

    problem_body  ->  problem_structure .   (rule 14)

    $default	reduce using rule 14 (problem_body)



state 129

    defpred  ->  '(' . ':' DEFPREDICATE id parameter factlist ')'   (rule 32)
    ctrl  ->  '(' . ':' ACTION id ':' EXCLUDE factlist ')'   (rule 37)
    wffctrl  ->  '(' . ':' WFFCTRL id scope precondition effect ')'   (rule 38)

    ':' 	shift, and go to state 146



state 130

    control  ->  '(' DEFINE '(' CONTROL id ')' '(' ':' DOMAIN id ')' control_body . ')'   (rule 25)

    ')' 	shift, and go to state 147



state 131

    control_body  ->  defpred .   (rule 28)
    control_body  ->  defpred . control_body   (rule 31)

    '(' 	shift, and go to state 129

    $default	reduce using rule 28 (control_body)

    control_body	go to state 148
    defpred	go to state 131
    ctrl	go to state 132
    wffctrl	go to state 133



state 132

    control_body  ->  ctrl .   (rule 26)
    control_body  ->  ctrl . control_body   (rule 29)

    '(' 	shift, and go to state 129

    $default	reduce using rule 26 (control_body)

    control_body	go to state 149
    defpred	go to state 131
    ctrl	go to state 132
    wffctrl	go to state 133



state 133

    control_body  ->  wffctrl .   (rule 27)
    control_body  ->  wffctrl . control_body   (rule 30)

    '(' 	shift, and go to state 129

    $default	reduce using rule 27 (control_body)

    control_body	go to state 150
    defpred	go to state 131
    ctrl	go to state 132
    wffctrl	go to state 133



state 134

    type  ->  '(' EITHER . types ')'   (rule 56)

    ID  	shift, and go to state 10

    types	go to state 151
    id  	go to state 152



state 135

    predicate  ->  '(' id typedparamlist ')' .   (rule 66)

    $default	reduce using rule 66 (predicate)



state 136

    typedparamlist  ->  paramlist type_def typedparamlist .   (rule 53)

    $default	reduce using rule 53 (typedparamlist)



state 137

    factlist  ->  '(' AND termlist ')' .   (rule 68)

    $default	reduce using rule 68 (factlist)



state 138

    forall  ->  '(' FORALL parameters term . factlist ')'   (rule 73)

    '(' 	shift, and go to state 62

    factlist	go to state 153
    exists	go to state 64
    forall	go to state 65
    termlist	go to state 66
    term	go to state 67



state 139

    exists  ->  '(' EXISTS parameters term . factlist ')'   (rule 72)

    '(' 	shift, and go to state 62

    factlist	go to state 154
    exists	go to state 64
    forall	go to state 65
    termlist	go to state 66
    term	go to state 67



state 140

    term  ->  '(' NEXT term ')' .   (rule 78)

    $default	reduce using rule 78 (term)



state 141

    term  ->  '(' NOT term ')' .   (rule 77)

    $default	reduce using rule 77 (term)



state 142

    term  ->  '(' GOAL term ')' .   (rule 79)

    $default	reduce using rule 79 (term)



state 143

    require_def  ->  '(' ':' . REQUIREMENTS requires ')'   (rule 12)
    problem_structure  ->  '(' ':' . OBJECTS typedlist ')'   (rule 17)
    problem_structure  ->  '(' ':' . INIT factlist ')'   (rule 18)
    problem_structure  ->  '(' ':' . GOAL factlist ')'   (rule 19)
    problem_structure  ->  '(' ':' . LENGTH length_spec ')'   (rule 20)

    REQUIREMENTS	shift, and go to state 34
    OBJECTS	shift, and go to state 155
    INIT	shift, and go to state 156
    LENGTH	shift, and go to state 157
    GOAL	shift, and go to state 158



state 144

    problem  ->  '(' DEFINE '(' PROBLEM id ')' '(' ':' DOMAIN id ')' problem_body ')' .   (rule 13)

    $default	reduce using rule 13 (problem)



state 145

    problem_body  ->  problem_body problem_structure .   (rule 15)

    $default	reduce using rule 15 (problem_body)



state 146

    defpred  ->  '(' ':' . DEFPREDICATE id parameter factlist ')'   (rule 32)
    ctrl  ->  '(' ':' . ACTION id ':' EXCLUDE factlist ')'   (rule 37)
    wffctrl  ->  '(' ':' . WFFCTRL id scope precondition effect ')'   (rule 38)

    DEFPREDICATE	shift, and go to state 159
    WFFCTRL	shift, and go to state 160
    ACTION	shift, and go to state 161



state 147

    control  ->  '(' DEFINE '(' CONTROL id ')' '(' ':' DOMAIN id ')' control_body ')' .   (rule 25)

    $default	reduce using rule 25 (control)



state 148

    control_body  ->  defpred control_body .   (rule 31)

    $default	reduce using rule 31 (control_body)



state 149

    control_body  ->  ctrl control_body .   (rule 29)

    $default	reduce using rule 29 (control_body)



state 150

    control_body  ->  wffctrl control_body .   (rule 30)

    $default	reduce using rule 30 (control_body)



state 151

    type  ->  '(' EITHER types . ')'   (rule 56)

    ')' 	shift, and go to state 162



state 152

    types  ->  id .   (rule 57)
    types  ->  id . types   (rule 58)

    ID  	shift, and go to state 10

    $default	reduce using rule 57 (types)

    types	go to state 163
    id  	go to state 152



state 153

    forall  ->  '(' FORALL parameters term factlist . ')'   (rule 73)

    ')' 	shift, and go to state 164



state 154

    exists  ->  '(' EXISTS parameters term factlist . ')'   (rule 72)

    ')' 	shift, and go to state 165



state 155

    problem_structure  ->  '(' ':' OBJECTS . typedlist ')'   (rule 17)

    ID  	shift, and go to state 10

    typedlist	go to state 166
    idlist	go to state 52
    id  	go to state 53



state 156

    problem_structure  ->  '(' ':' INIT . factlist ')'   (rule 18)

    '(' 	shift, and go to state 62

    factlist	go to state 167
    exists	go to state 64
    forall	go to state 65
    termlist	go to state 66
    term	go to state 67



state 157

    problem_structure  ->  '(' ':' LENGTH . length_spec ')'   (rule 20)

    '(' 	shift, and go to state 168

    length_spec	go to state 169
    length	go to state 170



state 158

    problem_structure  ->  '(' ':' GOAL . factlist ')'   (rule 19)

    '(' 	shift, and go to state 62

    factlist	go to state 171
    exists	go to state 64
    forall	go to state 65
    termlist	go to state 66
    term	go to state 67



state 159

    defpred  ->  '(' ':' DEFPREDICATE . id parameter factlist ')'   (rule 32)

    ID  	shift, and go to state 10

    id  	go to state 172



state 160

    wffctrl  ->  '(' ':' WFFCTRL . id scope precondition effect ')'   (rule 38)

    ID  	shift, and go to state 10

    id  	go to state 173



state 161

    ctrl  ->  '(' ':' ACTION . id ':' EXCLUDE factlist ')'   (rule 37)

    ID  	shift, and go to state 10

    id  	go to state 174



state 162

    type  ->  '(' EITHER types ')' .   (rule 56)

    $default	reduce using rule 56 (type)



state 163

    types  ->  id types .   (rule 58)

    $default	reduce using rule 58 (types)



state 164

    forall  ->  '(' FORALL parameters term factlist ')' .   (rule 73)

    $default	reduce using rule 73 (forall)



state 165

    exists  ->  '(' EXISTS parameters term factlist ')' .   (rule 72)

    $default	reduce using rule 72 (exists)



state 166

    problem_structure  ->  '(' ':' OBJECTS typedlist . ')'   (rule 17)

    ')' 	shift, and go to state 175



state 167

    problem_structure  ->  '(' ':' INIT factlist . ')'   (rule 18)

    ')' 	shift, and go to state 176



state 168

    length  ->  '(' . ':' SERIAL id ')'   (rule 23)
    length  ->  '(' . ':' PARALLEL id ')'   (rule 24)

    ':' 	shift, and go to state 177



state 169

    problem_structure  ->  '(' ':' LENGTH length_spec . ')'   (rule 20)

    ')' 	shift, and go to state 178



state 170

    length_spec  ->  length .   (rule 21)
    length_spec  ->  length . length_spec   (rule 22)

    '(' 	shift, and go to state 168

    $default	reduce using rule 21 (length_spec)

    length_spec	go to state 179
    length	go to state 170



state 171

    problem_structure  ->  '(' ':' GOAL factlist . ')'   (rule 19)

    ')' 	shift, and go to state 180



state 172

    defpred  ->  '(' ':' DEFPREDICATE id . parameter factlist ')'   (rule 32)

    ':' 	shift, and go to state 181

    parameter	go to state 182



state 173

    wffctrl  ->  '(' ':' WFFCTRL id . scope precondition effect ')'   (rule 38)

    ':' 	shift, and go to state 183

    scope	go to state 184



state 174

    ctrl  ->  '(' ':' ACTION id . ':' EXCLUDE factlist ')'   (rule 37)

    ':' 	shift, and go to state 185



state 175

    problem_structure  ->  '(' ':' OBJECTS typedlist ')' .   (rule 17)

    $default	reduce using rule 17 (problem_structure)



state 176

    problem_structure  ->  '(' ':' INIT factlist ')' .   (rule 18)

    $default	reduce using rule 18 (problem_structure)



state 177

    length  ->  '(' ':' . SERIAL id ')'   (rule 23)
    length  ->  '(' ':' . PARALLEL id ')'   (rule 24)

    PARALLEL	shift, and go to state 186
    SERIAL	shift, and go to state 187



state 178

    problem_structure  ->  '(' ':' LENGTH length_spec ')' .   (rule 20)

    $default	reduce using rule 20 (problem_structure)



state 179

    length_spec  ->  length length_spec .   (rule 22)

    $default	reduce using rule 22 (length_spec)



state 180

    problem_structure  ->  '(' ':' GOAL factlist ')' .   (rule 19)

    $default	reduce using rule 19 (problem_structure)



state 181

    parameter  ->  ':' . PARAMETERS parameters   (rule 40)
    parameter  ->  ':' . PARAMETERS 'b' 'a' 'd'   (rule 41)
    parameter  ->  ':' . PARAMETERS   (rule 42)

    PARAMETERS	shift, and go to state 39



state 182

    defpred  ->  '(' ':' DEFPREDICATE id parameter . factlist ')'   (rule 32)

    '(' 	shift, and go to state 62

    factlist	go to state 188
    exists	go to state 64
    forall	go to state 65
    termlist	go to state 66
    term	go to state 67



state 183

    scope  ->  ':' . SCOPE factlist   (rule 39)

    SCOPE	shift, and go to state 189



state 184

    wffctrl  ->  '(' ':' WFFCTRL id scope . precondition effect ')'   (rule 38)

    ':' 	shift, and go to state 42

    precondition	go to state 190



state 185

    ctrl  ->  '(' ':' ACTION id ':' . EXCLUDE factlist ')'   (rule 37)

    EXCLUDE	shift, and go to state 191



state 186

    length  ->  '(' ':' PARALLEL . id ')'   (rule 24)

    ID  	shift, and go to state 10

    id  	go to state 192



state 187

    length  ->  '(' ':' SERIAL . id ')'   (rule 23)

    ID  	shift, and go to state 10

    id  	go to state 193



state 188

    defpred  ->  '(' ':' DEFPREDICATE id parameter factlist . ')'   (rule 32)

    ')' 	shift, and go to state 194



state 189

    scope  ->  ':' SCOPE . factlist   (rule 39)

    '(' 	shift, and go to state 62

    factlist	go to state 195
    exists	go to state 64
    forall	go to state 65
    termlist	go to state 66
    term	go to state 67



state 190

    wffctrl  ->  '(' ':' WFFCTRL id scope precondition . effect ')'   (rule 38)

    ':' 	shift, and go to state 44

    effect	go to state 196



state 191

    ctrl  ->  '(' ':' ACTION id ':' EXCLUDE . factlist ')'   (rule 37)

    '(' 	shift, and go to state 62

    factlist	go to state 197
    exists	go to state 64
    forall	go to state 65
    termlist	go to state 66
    term	go to state 67



state 192

    length  ->  '(' ':' PARALLEL id . ')'   (rule 24)

    ')' 	shift, and go to state 198



state 193

    length  ->  '(' ':' SERIAL id . ')'   (rule 23)

    ')' 	shift, and go to state 199



state 194

    defpred  ->  '(' ':' DEFPREDICATE id parameter factlist ')' .   (rule 32)

    $default	reduce using rule 32 (defpred)



state 195

    scope  ->  ':' SCOPE factlist .   (rule 39)

    $default	reduce using rule 39 (scope)



state 196

    wffctrl  ->  '(' ':' WFFCTRL id scope precondition effect . ')'   (rule 38)

    ')' 	shift, and go to state 200



state 197

    ctrl  ->  '(' ':' ACTION id ':' EXCLUDE factlist . ')'   (rule 37)

    ')' 	shift, and go to state 201



state 198

    length  ->  '(' ':' PARALLEL id ')' .   (rule 24)

    $default	reduce using rule 24 (length)



state 199

    length  ->  '(' ':' SERIAL id ')' .   (rule 23)

    $default	reduce using rule 23 (length)



state 200

    wffctrl  ->  '(' ':' WFFCTRL id scope precondition effect ')' .   (rule 38)

    $default	reduce using rule 38 (wffctrl)



state 201

    ctrl  ->  '(' ':' ACTION id ':' EXCLUDE factlist ')' .   (rule 37)

    $default	reduce using rule 37 (ctrl)



state 202

    $   	go to state 203



state 203

    $   	go to state 204



state 204

    $default	accept
